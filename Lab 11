#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// Structure to represent an edge
struct Edge {
    int source;
    int destination;
    int weight;

    Edge(int src, int dest, int w) : source(src), destination(dest), weight(w) {}
};

// Structure to represent a node in the graph
struct Node {
    int vertex;
    int weight;

    Node(int v, int w) : vertex(v), weight(w) {}
};

// Custom comparator for priority queue
struct CompareNode {
    bool operator()(const Node& a, const Node& b) {
        return a.weight > b.weight;
    }
};

// Function to add an undirected edge between two vertices
void addEdge(vector<vector<Edge>>& graph, int src, int dest, int weight) {
    Edge edge1(src, dest, weight);
    Edge edge2(dest, src, weight);
    graph[src].push_back(edge1);
    graph[dest].push_back(edge2);
}

// Function to find the MST using Prim's algorithm
void primMST(vector<vector<Edge>>& graph, int startVertex) {
    int V = graph.size();  // Total number of vertices in the graph

    // Create a priority queue to store nodes with minimum weight
    priority_queue<Node, vector<Node>, CompareNode> pq;

    // Create a vector to store the parent of each vertex
    vector<int> parent(V, -1);

    // Create a vector to store the weight of each vertex
    vector<int> weight(V, INT_MAX);

    // Create a vector to store whether a vertex is included in MST or not
    vector<bool> inMST(V, false);

    // Insert the starting vertex into the priority queue
    pq.push(Node(startVertex, 0));
    weight[startVertex] = 0;

    while (!pq.empty()) {
        // Extract the vertex with the minimum weight
        int u = pq.top().vertex;
        pq.pop();

        // Include the extracted vertex in MST
        inMST[u] = true;

        // Traverse all adjacent vertices of u
        for (const Edge& edge : graph[u]) {
            int v = edge.destination;
            int w = edge.weight;

            // If v is not in MST and weight of v is greater than weight of u-v edge,
            // then update the weight and parent of v and insert it into the priority queue
            if (!inMST[v] && weight[v] > w) {
                weight[v] = w;
                parent[v] = u;
                pq.push(Node(v, weight[v]));
            }
        }
    }

    // Print the MST
    cout << "Minimum Spanning Tree:" << endl;
    for (int i = 1; i < V; i++) {
        cout << "Edge: " << parent[i] << " - " << i << "   Weight: " << weight[i] << endl;
    }
}

int main() {
    int V = 6;  // Total number of vertices

    // Create a graph represented as an adjacency list
    vector<vector<Edge>> graph(V);

    // Adding edges to the graph
    addEdge(graph, 0, 5, 1);
    addEdge(graph, 1, 3, 1);
    addEdge(graph, 1, 2, 2);
    addEdge(graph, 0, 1, 3);
    addEdge(graph, 2, 3, 3);
    addEdge(graph, 4, 5, 4);
    addEdge(graph, 2, 5, 5);
    addEdge(graph, 3, 4, 5);
    addEdge(graph, 1, 4, 10);

    int startVertex = 3;  // Starting vertex for MST

    // Find the MST using Prim's algorithm
    primMST(graph, startVertex);

    return 0;
}
